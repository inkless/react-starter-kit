// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component MapBox should render MapBox correctly 1`] = `
.c0 {
  box-sizing: border-box;
  padding: 8px;
  padding: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

<ThemeProvider
  theme={
    Object {
      "Badge": Object {},
      "Box": Object {
        "padding": "8px",
      },
      "Button": Object {},
      "Card": Object {},
      "Footer": Object {},
      "Heading": Object {},
      "Text": Object {},
      "colors": Object {
        "common": Object {
          "black": "#000",
          "blue": "#2196f3",
          "red": "#fd5850",
          "white": "#fff",
        },
        "disabled": Object {
          "contrast": "#ffffff",
          "main": "#b1b1b1",
        },
        "error": Object {
          "contrast": "#ffffff",
          "main": "#d46e6e",
        },
        "grays": Array [
          "#f2f2f2",
          "#e4e4e4",
          "#d4d4d4",
          "#c3c3c3",
          "#b1b1b1",
          "#9b9b9b",
          "#8b8b8b",
          "#7a7a7a",
          "#656565",
          "#484848",
        ],
        "hover": Object {
          "main": "rgba(0, 0, 0, 0.08)",
        },
        "primary": Object {
          "contrast": "#ffffff",
          "dark": "#3b8156",
          "light": "#9be3b3",
          "main": "#6ab183",
        },
        "secondary": Object {
          "contrast": "#ffffff",
          "dark": "#0a151d",
          "light": "#5b656f",
          "main": "#313b44",
        },
      },
      "fontSizes": Array [
        8,
        10,
        12,
        14,
        16,
        20,
        24,
        32,
        48,
        64,
        96,
        128,
      ],
      "fontWeights": Object {
        "bold": 700,
        "normal": 500,
      },
      "fonts": Object {
        "font": "-apple-system,Helvetica,Arial,sans-serif",
        "mono": "SFMono-Regular,Menlo,monospace",
      },
      "letterSpacings": Object {
        "caps": "0.25em",
        "normal": "normal",
      },
      "radii": Array [
        0,
        2,
        4,
        8,
      ],
      "shadows": Array [
        "none",
        "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
        "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
        "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
        "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
        "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
        "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
        "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
        "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
        "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
        "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
        "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
        "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
        "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
        "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
        "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
        "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
        "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
        "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
        "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
        "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
        "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
        "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
        "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
        "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
      ],
      "space": Array [
        0,
        4,
        8,
        16,
        32,
        64,
        128,
        256,
        512,
      ],
      "transitions": Object {
        "create": [Function],
        "duration": Object {
          "complex": 375,
          "enteringScreen": 225,
          "leavingScreen": 195,
          "short": 250,
          "shorter": 200,
          "shortest": 150,
          "standard": 300,
        },
        "easing": Object {
          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
        },
      },
    }
  }
>
  <MapBox
    deliverSimulationStarted={false}
    deliveringOrders={
      Array [
        Object {
          "coordinates": Array [
            -131,
            37,
          ],
          "destination": "185 Culver Blvd, Playa Del Rey, CA 90293",
          "dispatchTime": 119,
          "distance": 2,
          "id": "9H4whD",
          "name": "Banana Split",
          "route": Object {},
          "speed": 22,
          "startTime": 2019-04-20T05:01:15.265Z,
        },
      ]
    }
    fetchOriginOperation={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    mapStyle={Object {}}
    origin={
      Object {
        "address": "mock address",
        "coordinates": Array [
          -130,
          38,
        ],
      }
    }
    padding={0}
    setViewport={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "altitude": 1.5,
              "bearing": 0,
              "height": 0,
              "latitude": 37,
              "longitude": -130,
              "maxPitch": 60,
              "maxZoom": 24,
              "minPitch": 0,
              "minZoom": 0,
              "pitch": 0,
              "transitionDuration": 0,
              "transitionEasing": [Function],
              "transitionInterpolator": LinearInterpolator {
                "around": undefined,
                "propNames": Array [
                  "longitude",
                  "latitude",
                  "zoom",
                  "bearing",
                  "pitch",
                ],
              },
              "transitionInterruption": 1,
              "width": 0,
              "zoom": 11,
            },
            Object {},
            Object {},
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    viewport={
      Object {
        "latitude": 37,
        "longitude": -130,
        "zoom": 11,
      }
    }
  >
    <Styled(styled.div)
      deliverSimulationStarted={false}
      fetchOriginOperation={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      mapStyle={Object {}}
      origin={
        Object {
          "address": "mock address",
          "coordinates": Array [
            -130,
            38,
          ],
        }
      }
      padding={0}
      setViewport={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "altitude": 1.5,
                "bearing": 0,
                "height": 0,
                "latitude": 37,
                "longitude": -130,
                "maxPitch": 60,
                "maxZoom": 24,
                "minPitch": 0,
                "minZoom": 0,
                "pitch": 0,
                "transitionDuration": 0,
                "transitionEasing": [Function],
                "transitionInterpolator": LinearInterpolator {
                  "around": undefined,
                  "propNames": Array [
                    "longitude",
                    "latitude",
                    "zoom",
                    "bearing",
                    "pitch",
                  ],
                },
                "transitionInterruption": 1,
                "width": 0,
                "zoom": 11,
              },
              Object {},
              Object {},
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      viewport={
        Object {
          "latitude": 37,
          "longitude": -130,
          "zoom": 11,
        }
      }
    >
      <StyledComponent
        deliverSimulationStarted={false}
        fetchOriginOperation={
          [MockFunction] {
            "calls": Array [
              Array [],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                "
  box-sizing: border-box;
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
",
                "
  display: flex;
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
  ",
                [Function],
                "
",
              ],
            },
            "displayName": "Styled(styled.div)",
            "foldedComponentIds": Array [
              "sc-bdVaJa",
            ],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        mapStyle={Object {}}
        origin={
          Object {
            "address": "mock address",
            "coordinates": Array [
              -130,
              38,
            ],
          }
        }
        padding={0}
        setViewport={
          [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "altitude": 1.5,
                  "bearing": 0,
                  "height": 0,
                  "latitude": 37,
                  "longitude": -130,
                  "maxPitch": 60,
                  "maxZoom": 24,
                  "minPitch": 0,
                  "minZoom": 0,
                  "pitch": 0,
                  "transitionDuration": 0,
                  "transitionEasing": [Function],
                  "transitionInterpolator": LinearInterpolator {
                    "around": undefined,
                    "propNames": Array [
                      "longitude",
                      "latitude",
                      "zoom",
                      "bearing",
                      "pitch",
                    ],
                  },
                  "transitionInterruption": 1,
                  "width": 0,
                  "zoom": 11,
                },
                Object {},
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        viewport={
          Object {
            "latitude": 37,
            "longitude": -130,
            "zoom": 11,
          }
        }
      >
        <div
          className="c0"
          origin={
            Object {
              "address": "mock address",
              "coordinates": Array [
                -130,
                38,
              ],
            }
          }
        >
          <InteractiveMap
            asyncRender={false}
            attributionControl={true}
            bearing={0}
            className=""
            clickRadius={0}
            container={<body />}
            disableTokenWarning={false}
            doubleClickZoom={true}
            dragPan={true}
            dragRotate={true}
            getCursor={[Function]}
            height="100%"
            keyboard={true}
            latitude={37}
            longitude={-130}
            mapOptions={Object {}}
            mapStyle={Object {}}
            mapboxApiAccessToken="no-token"
            maxPitch={60}
            maxZoom={24}
            minPitch={0}
            minZoom={0}
            onClick={null}
            onContextMenu={[Function]}
            onError={[Function]}
            onHover={null}
            onLoad={[Function]}
            onNativeClick={null}
            onResize={[Function]}
            onStateChange={[Function]}
            onTransitionEnd={[Function]}
            onTransitionInterrupt={[Function]}
            onTransitionStart={[Function]}
            onViewStateChange={null}
            onViewportChange={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "altitude": 1.5,
                      "bearing": 0,
                      "height": 0,
                      "latitude": 37,
                      "longitude": -130,
                      "maxPitch": 60,
                      "maxZoom": 24,
                      "minPitch": 0,
                      "minZoom": 0,
                      "pitch": 0,
                      "transitionDuration": 0,
                      "transitionEasing": [Function],
                      "transitionInterpolator": LinearInterpolator {
                        "around": undefined,
                        "propNames": Array [
                          "longitude",
                          "latitude",
                          "zoom",
                          "bearing",
                          "pitch",
                        ],
                      },
                      "transitionInterruption": 1,
                      "width": 0,
                      "zoom": 11,
                    },
                    Object {},
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            pitch={0}
            preserveDrawingBuffer={false}
            preventStyleDiffing={false}
            reuseMaps={false}
            scrollZoom={true}
            style={null}
            touchAction="none"
            touchRotate={false}
            touchZoom={true}
            transitionDuration={0}
            transitionEasing={[Function]}
            transitionInterpolator={
              LinearInterpolator {
                "around": undefined,
                "propNames": Array [
                  "longitude",
                  "latitude",
                  "zoom",
                  "bearing",
                  "pitch",
                ],
              }
            }
            transitionInterruption={1}
            visibilityConstraints={
              Object {
                "maxPitch": 60,
                "maxZoom": 24,
                "minPitch": 0,
                "minZoom": 0,
              }
            }
            visible={true}
            width="100%"
            zoom={11}
          >
            <div
              key="event-canvas"
              style={
                Object {
                  "cursor": "grab",
                  "height": "100%",
                  "position": "relative",
                  "width": "100%",
                }
              }
            >
              <StaticMap
                asyncRender={false}
                attributionControl={true}
                bearing={0}
                className=""
                clickRadius={0}
                container={<body />}
                disableTokenWarning={false}
                doubleClickZoom={true}
                dragPan={true}
                dragRotate={true}
                getCursor={[Function]}
                height="100%"
                keyboard={true}
                latitude={37}
                longitude={-130}
                mapOptions={Object {}}
                mapStyle={Object {}}
                mapboxApiAccessToken="no-token"
                maxPitch={60}
                maxZoom={24}
                minPitch={0}
                minZoom={0}
                onClick={null}
                onContextMenu={[Function]}
                onError={[Function]}
                onHover={null}
                onLoad={[Function]}
                onNativeClick={null}
                onResize={[Function]}
                onStateChange={[Function]}
                onTransitionEnd={[Function]}
                onTransitionInterrupt={[Function]}
                onTransitionStart={[Function]}
                onViewStateChange={null}
                onViewportChange={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "altitude": 1.5,
                          "bearing": 0,
                          "height": 0,
                          "latitude": 37,
                          "longitude": -130,
                          "maxPitch": 60,
                          "maxZoom": 24,
                          "minPitch": 0,
                          "minZoom": 0,
                          "pitch": 0,
                          "transitionDuration": 0,
                          "transitionEasing": [Function],
                          "transitionInterpolator": LinearInterpolator {
                            "around": undefined,
                            "propNames": Array [
                              "longitude",
                              "latitude",
                              "zoom",
                              "bearing",
                              "pitch",
                            ],
                          },
                          "transitionInterruption": 1,
                          "width": 0,
                          "zoom": 11,
                        },
                        Object {},
                        Object {},
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  }
                }
                pitch={0}
                preserveDrawingBuffer={false}
                preventStyleDiffing={false}
                reuseMaps={false}
                scrollZoom={true}
                style={null}
                touchAction="none"
                touchRotate={false}
                touchZoom={true}
                transitionDuration={0}
                transitionEasing={[Function]}
                transitionInterpolator={
                  LinearInterpolator {
                    "around": undefined,
                    "propNames": Array [
                      "longitude",
                      "latitude",
                      "zoom",
                      "bearing",
                      "pitch",
                    ],
                  }
                }
                transitionInterruption={1}
                visibilityConstraints={
                  Object {
                    "maxPitch": 60,
                    "maxZoom": 24,
                    "minPitch": 0,
                    "minZoom": 0,
                  }
                }
                visible={true}
                width="100%"
                zoom={11}
              >
                <div
                  key="map-container"
                  style={
                    Object {
                      "height": "100%",
                      "position": "relative",
                      "width": "100%",
                    }
                  }
                >
                  <div
                    className=""
                    key="map-mapbox"
                    style={
                      Object {
                        "height": "100%",
                        "overflow": "hidden",
                        "position": "absolute",
                        "visibility": "inherit",
                        "width": "100%",
                      }
                    }
                  />
                  <AutoSizer
                    disableHeight={false}
                    disableWidth={false}
                    key="autosizer"
                    onResize={[Function]}
                    style={Object {}}
                  >
                    <div
                      style={
                        Object {
                          "height": 0,
                          "overflow": "visible",
                          "width": 0,
                        }
                      }
                    />
                  </AutoSizer>
                </div>
              </StaticMap>
            </div>
          </InteractiveMap>
        </div>
      </StyledComponent>
    </Styled(styled.div)>
  </MapBox>
</ThemeProvider>
`;
